#include<iostream>

using namespace std;

template<typename E>class Link {
public:
	E element;
	Link *next;

	Link(const E& elemval, Link* nextval = NULL) {
		element = elemval;
		next = nextval;
	}
	Link(Link* nextval = NULL) {
		next = nextval;
	}
};

template<typename E>
void lprint(Link<E> *L) {
	if (L == NULL) return;
	cout << "<";
	for (Link<E> *p = L->next; p != NULL; p = p->next) {
		cout << p->element << "  ";
	}
	cout << ">" << endl;
}

template<typename E>
Link<E>* create(E b[], int size) {
	Link<E>* tail = new Link<E>(b[size - 1], NULL);
	Link<E>* temp = new Link<E>(b[size - 2], tail);
	Link<E>* pre = temp;
	for (int i = size - 2; i > 0; i--) {
		temp = new Link<E>(b[i - 1], pre);
		pre = temp;
	}

	Link<E>* head = new Link<E>(NULL, pre);

	return head;
}

template<typename E>
Link<E>* locate(Link<E>* a, int size) {
	int location;
	cin >> location;
	int i = 0;
	for (Link<E> *n = a; i < size; n = n->next) {
		if (i == location) {
			return n;
			break;
		}
		i++;

	}
}

template<typename E>
Link<E>* max(Link<E>* a) {
	Link<E>* max = new Link<E>(0);
	for (Link<E> *n = a; n != 0; n = n->next) {
		if (n->element > max->element) {
			max = n;
		}
	}
	return max;
}

template<typename E>
Link<E>* reserve(Link<E>* c, int size) {
	Link<E>* firstValue = c->next;
	Link<E>* secondValue = firstValue->next;
	Link<E>* tail = new Link<E>(firstValue->element, NULL);
	Link<E>* temp = new Link<E>(secondValue->element, tail);
	Link<E>* pre = temp;
	for (Link<E> *thirdValue = secondValue->next; thirdValue != NULL; thirdValue = thirdValue->next) {
		temp = new Link<E>(thirdValue->element, pre);
		pre = temp;
	}

	Link<E>* head = new Link<E>(NULL, pre);

	return head;
}

int main() {
	int a[] = { 11,11,22,22,22,33,33,44,44,44 };
	int b[] = { 9,14,19,23,28,38,43,54,78,89 };
	int c[] = { 5,17,18,24,27,39,46,50,70,99 };
	Link<int> *p = create(a, 10);
	lprint(p);
	Link<int> *p1 = locate(p, 11);
	if (p1 != NULL) {
		cout << p1->element << endl;
	}
	Link<int> *p2 = max(p);
	if (p2 != NULL) {
		cout << p2->element << endl;
	}
	Link<int> *p3 = reserve(p, 10);
	lprint(p3);
	system("pause");
	return 0;

}



